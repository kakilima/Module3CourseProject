split(a,cyl)
split(a,a$cyl)
split(a,a$cyl=6)
split(a,a$gear)
split(a,a$gear>4)
split(a,a$cyl==6)
split(a,a$cyl==6,T)
split(a,a$cyl==0,T)
split(a,a$cyl==0,drop=TRUE)
split(a,a$cyl!=0,drop=TRUE)
?interactions
?gl
??interaction
?interaction
gl(2,5)
gl(5,5)
interaction(gl(5,5),gl(2,2))
interaction(gl(5,5),gl(5,1))
interaction(1:10,1:2)
sort(interaction(1:10,1:2))
interaction.plot(1:10,1:2)
?interaction.plot
head(a)
lapply(a,mpg*2)
lapply(a,a$mpg*2)
lapply(a,a=a$mpg*2)
lapply(a,function(x)a$mpg*2)
sapply(a,function(x)a$mpg*2)
sapply(a$mpg,function(x)a$mpg*2)
sapply(a$mpg,function(x)min-2)
sapply(a,function(x)min-2)
sapply(a,function(x)min)
sapply(a,function(x)a)
sapply(a,mean
mean
lapply(a,class)
lapply(a,max)
max
lapplt(a,max)
lapply(a,max)
lapply(a,names(a))
lapply(a,names())
b=list(1:5,10:20,c("a","b","c"))
apply(b,2,min)
apply(b,2,class)
apply(b,2,mean)
lapply(b,min)
lapply(b,class)
lapply(a,class)
lapply(head(a),class)
lapply(head(a),function(x)min-max)
lapply(a[[2][2:3]],function(x)max-min)
lapply(a[,[2:3]],function(x)max-min)
lapply(a,class)
sapply(a,class)
vapply(a,class)
sapply(a,class)
b=list(1:10,11:20,21:30)
b
lapply(b,function(x)x*2)
lapply(b,function(x)min(x))
lapply(b,function(x)min(x)-max(x))
lapply(b,function(x)max(x)+2)
lapply(b,max
)
lapply(b,max)
lapply(b,class)
lapply(b,length)
apply(b,2,length)
apply(b,2,sum)
c<-1:100
dim(c)=c(10,10)
c
apply(c,1,mean)
apply(c,1,function(x)max(x)-min(x))
apply(c,2,function(x)max(x)-min(x))
d=list(c)
d
rm(D)
rm(d)
View(c)
b
sapplt(b,min())
sapply(b,min())
sapply(b,min
)
sapply(b,min)
sapply(b,mean)
sapply(b,function(x)x*6)
b
sapply(b,function(x)x*6)
lapply(b,function(x)x*6)
apply(c,2,function(x)x*2)
apply(c,2,function(x)x*200)
apply(c,2,function(x)x*100)
apply(c,dim)
apply(c,2,dim)
apply(c,1,dim)
apply(c,1,length)
apply(c,1,length)
c2<c
c2=c
dim(c2)=c(20,5)
apply(c2,1,length)
b
b=list(rep(5,2),1:10,11:20,21:30)
b
b[[1]]=c(1,1,1,1,2,2,3,3,4,4)
b
tapply(b,1,min)
?tapply
tapply(b,b[[1]],min)
tapply(b[[1]],b[[1]],min)
b
tapply(b[[1]],b[[1]],min)
tapply(b[[2]],b[[1]],min)
tapply(b[[2]],b[[1]],max)
b
tapply(b[[2]],b[[1]],max)
tapply(c(b[[2]],b[[3]]),b[[1]],max)
tapply(b[[2]],b[[1]],max)
tapply(b[[2]],b[[1]],function(x)x*2)
b
tapply(b[[2]],b[[1]],function(x)x*2)
mapply(sum,b,b)
mapply(sum,c,c)
mapply(sum,c)
mapply(sum,c,c,c,c)
mapply(sum,c,b)
mapply(sum,c,2)
mapply(sum,c,-2)
?ifelse
mappy(sum,c,ifelse(x>10,100,-100))
mapply(sum,c,ifelse(x>10,100,-100))
mapply(class,c,b)
mapply(class,c)
mapply(sum,1:10,1:100)
mapply(sum,1:10,1:10)
mapply(sum,1:10,1:10,1:100)
mapply(sum,1:10,1:10,1:100,1:11)
mapply(sum,1:10,1:10,1:100,1:5)
mapply(sum,1:10,1:10,1:100,1:5, SIMPLIFY = T)
a
tapply(a,a$gear,count)
tapply(a$mpg,a$gear,count)
tapply(a$mpg,a$gear,dim)
dim
tapply(a$mpg,a$gear,length)
tapply(a,a$gear,length)
?url
rm(ls())
ls()
rm(list=LS())
rm(list=ls())
a="https://data.baltimorecity.gov/api/views/uuwk-975y/rows.csv?accessType=DOWNLOAD"
download.file(a,"grocery.csv")
g=read.csv("grocery.csv")
g
head(g)
h=read.csv(a)
rm(h)
h=read.csv2(a)
head(h)
rm(h)
library("RMySQL", lib.loc="~/R/win-library/3.2")
?"dbConnect"
x=dbConnect(MySQL(), user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
dbGetQuery(x,"show databases;")
dbDisconnect(x)
a="http://putlocker.is/watch-minions-online-free-putlocker.html"
library("XML", lib.loc="~/R/win-library/3.2")
library("httr", lib.loc="~/R/win-library/3.2")
html=htmlTreeParse(a,useInternalNodes = T)
class(html)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td",xmlValue)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//table2",xmlValue)
xpathSApply(html,"//table[@class='table2']",xmlValue)
xpathSApply(html,"//table[@class='table2']/td",xmlValue)
x=xpathSApply(html,"//table[@class='table2']/td",xmlValue)
x
x=xpathSApply(html,"//table[@class='table2']//td",xmlValue)
x
x=xpathSApply(html,"//table[@class='table2']//td",xmlValue)
x[16]
b="http://putlocker.is/watch-terminator-genisys-online-free-putlocker.html"
html=htmlTreeParse(b,useInternalNodes = T)
x=xpathSApply(html,"//table[@class='table2']//td",xmlValue)
x[16]
??trim
strtrim(x)
trim(x)
?trim
trimws(x)
x[c(10,12,14,16)]
x[10]
x[12]
x[14]
x[16]
?xpathSApply
y=xpathSApply(html,"/html/body/table[2]/tbody/tr/td[1]/div[1]/table[1]/tbody/tr/td[2]/table/tbody/tr[6]",xmlValue)
y=xpathSApply(html,"//html//body//table[2]//tbody//tr//td[1]//div[1]//table[1]//tbody//tr//td[2]//table//tbody//tr[6]",xmlValue)
a=read.csv("getdata-data-ss06hid.csv"")
a=read.csv("getdata-data-ss06hid.csv")
glimpse(a)
b=tbl_df(a)
b
glimpseb
glimpse(b)
b %>%
select(b,ACR,ACS)
select(ACR,ACS)
a %>%
select(ACS)
select(b,ACS)
head(b$ACS)
names(b)
head(b$ACR)
select(b,ACR)
select(b,ACR,AGS)
select(b,ACR,AGS) %>%
filter(ACR==3)
a[a$ACR==3 & a$ACS==6]
c=a[a$ACR==3 & a$ACS==6]
View(c)
cm(c)
rm(c)
c=a$ACR==3 & a$ACS==6
c=(a$ACR==3 & a$ACS==6)
c=(a$ACR==3 && a$ACS==6)
c
a$ACS==3
str(a)
glimps(a)
glimpse(a)
c=a[,11:12]
head(c)
c$value<-(ACR==3 & ACS==6)
c$value<-(c$ACR==3 & c$ACS==6)
c$value<-(c$ACR==3 && c$ACS==6)
head(c)
table(c$value)
c$value<-(c$ACR==3 && c$AGS==6)
table(c$value)
c$value<-(c$ACR==3)
table(c$value)
c$value<-(c$AGS==6)
table(c$value)
c$value<-c$ACR==3 && c$AGS==6
table(c$value)
d <-a$ACR==3 && a$AGS==6
table(d)
d <-a$ACR==3 & a$AGS==6
which(d)
table(d)
?jjpeg
?jpeg
jpeg("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = T)
library("jpeg", lib.loc="~/R/win-library/3.2")
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", T)
readJPEG("getdata-jeff.jpg", T)
pic=readJPEG("getdata-jeff.jpg", T)
class(pic)
head(pic)
?quantile
quantile(pic,c(.3,.8))
gdp=read.csv("getdata-data-GDP.csv")
ed=read.csv("getdata-data-EDSTATS_Country.sv")
ed=read.csv("getdata-data-EDSTATS_Country.csv")
rm(a)
rm(b)
rm(c)
rm(pic)
rm(d)
glimpse(ed)
glimpse(gdp)
?left_join
rename(ed, X=CountryCode)
rename(ed, X=CountryCode)
rename(ed, X=CountryCode) %>%
inner_join(ed,gdp, by="X")
inner_join(ed,gdp)
select(ed,countryCode)
select(ed,"countryCode")
ed1=tbl_df(ed)
gdp1=tbl_df(gdp)
select(ed1,CountryCode)
rename(ed, X=CountryCode) %>%
rename(ed1, X=CountryCode) %>%
inner_join(ed1,gdp1,by=X)
inner_join(ed1,gdp1)
rename(ed1, X=CountryCode) %>%
inner_join(ed1,gdp1)
edp1
gdp1
select(gdp1, x.1:x.7)
select(gdp1, X.1:X.7)
edp1
gdp1
ed1
gdp1
gdp=read.csv("getdata-data-GDP.csv", skip = 4)
head(gdp)
gdp1=tbl_df(gdp)
gdp1
rename(ed,X=CountryCode)
ed
ed1
rename(ed,X=CountryCode)
rename(ed1,X=CountryCode)
ed1
ed1=rename(ed1,X=CountryCode)
ed1
names(ed1)
names(gdp1)
inner_join(ed1,gdp1)
t=inner_join(ed1,gdp1)
t
names(t)
t(13,)
t[13,]
ed1
gdp1
t
tail(ed)
head(ed)
inner_join(gdp1,ed1)
inner_join(gdp1,ed1,by=X)
ed1
gdp1
inner_join(gdp1,ed1,by=X)
inner_join(gdp1,ed1,by="X")
class(gdp1)
cass(ed1)
class(ed1)
glimpse(ed1)
glimpse(gdp1)
distinct(ed1)
distinct(ed1$X)
glimpse(t)
which(gdp1$X=="")
gdp1[gdp1$X==""]
gdp1[gdp$X==""]
gdp[gdp$X==""]
gdp[gdp$CountryCode==""]
View(ed)
View(gdp)
table(gdp$X=="")
gdp2=split(gdp,gdp$X!="",drop=T)
gdp2
gdp3=gdp2[[2]]
gdp3
gdp4 = tbl_df(gdp3)
gdp4
inner_join(gdp4,ed1)
?join
?merge
?join
View(gdp1)
rm(gdp4)
rm(gdp3)
rm(gdp2)
gdp[gdp$X.1!=""]
gdp[gdp$X.1 != ""]
glimpse(gdp)
gdp[gdp$X.1 == NA]
table(gdp$X.1)
gdp[1:190,]
gdp1=tbl_df(gdp[1:190,])
gdp1
View(gdp1)
inner_join(gdp1,ed)
gdp1
ed1
gdp1
inner_join(gdp1,ed,by=X)
inner_join(gdp1,ed,by="X")
distinct(gdp1$X)
?distinct
distinct(gdp1, X)
distinct(gdp1, X.3)
gdp1$X
gdp1$x
gdp1$X
ed1$X
ed1$x
?join
join(gdp1,ed1)
inner_join(gdp1,ed1)
t=inner_join(gdp1,ed1)
t
t
arrange(t,desc(X.1))
arrange(t,desc(X.1)) %>% print(30)
arrange(t,desc(X.1)) %>% print()
View(t)
desc(t)
tt=arrange(t,desc(X1))
tt=arrange(t,desc(X.1))
tt
View(tt)
tm(tt)
rm(tt)
t
glimpse(t)
as.numeric(t$X.1)
glimpse(t)
t$X.1=as.numeric(t$X.1)
glimpse(t)
t$X.1=as.integer(t$X.1)
glimpse(t)
arrange(t,desc(X.1))
tt=arrange(t,desc(X.1))
View(tt)
?read.csv
ed=read.csv("ED.csv")
head(ed)
length(ed)
dim(ed)
View(ed)
gdp=read.csv("GDP.csv")
gdp
View(gdp)
gdp1=gdp[5:194,]
View(gdp1)
View(ed)
tt = merge(gdp1,ed,by.x = X, by.y = CountryCode)
tt = merge(gdp1,ed,by.x = X, by.y = CountryCode)
tt = merge(gdp1,ed,by.x = "X", by.y = CountryCode)
tt = merge(gdp1,ed,by.x = "X", by.y = "CountryCode")
View(tt)
class(tt)
class(tt[,2])
levels(tt[,2])
?read.csv
View(gdp)
gdp=read.csv("GDP.csv",header=F,skip=5,nrows=190)
str(gdp)
View(gdp1)
rm(gdp1)
View(ed)
tt=merge(gdp,ed,by.x="V1",by.y="CountryCode")
View(tt)
arrange(tt,desc(V2))
t=arrange(tt,desc(V2))
View(t)
tapply(tt$V2,tt$Income.Group,mean)
quantile(t,c(.2.4.6.8))
quantile(t,c(.2,.4,.6,.8))
quantile(t$V2,c(.2,.4,.6,.8))
?cut
q5=cut(t,quantile(0,.2,.4,.6,.8))
q5=cut(t$V2,quantile(0,.2,.4,.6,.8))
quantile(0,.2,.4,.6,.8)
quantile(0.0,.2,.4,.6,.8)
quantile(,.2,.4,.6,.8)
quantile(t$V2,.2,.4,.6,.8)
> q5=cut(t$V2,quantile(t$V2,c(0,.2,.4,.6,.8))
quantile(t$V2,c(0,.2,.4,.6,.8)
)
quantile(t$V2,c(0,.2,.4,.6,.8))
q5=cut(t$V2,quantile(t$V2,c(0,.2,.4,.6,.8)))
q5
rm(q5)
quantile(t$V2,c(0,.2,.4,.6,.8))
?ntile
ntile(tt$V2,5)
table(ntile(tt$V2,5))
nrow(tt)
tt$tile=ntile(tt$V2,5)
View(tt)
table(tt$tile,tt$Income.Group)
install.packages("quantmod")
## Read in Labels / Descriptors
features <- read.table("features.txt", col.names = c("feature_code","feature"))
header <- as.vector(features[,2])
activity <- read.table("activity_labels.txt", col.names = c("activity_code","activity"))
setwd("C:/Coursera/M3Project")
## Read in Labels / Descriptors
features <- read.table("features.txt", col.names = c("feature_code","feature"))
header <- as.vector(features[,2])
activity <- read.table("activity_labels.txt", col.names = c("activity_code","activity"))
## Load Training Data
x_train <- tbl_df(read.table("train/X_train.txt", col.names = header, colClasses = rep("numeric",561)))
y_train <- read.table("train/y_train.txt", col.names = "activity_code")
y_train <- left_join(y_train,activity)
subject_train <- read.table("train/subject_train.txt",col.names = "subject")
train <- cbind(subject_train, y_train, x_train)
library(dpylr)
## Load Training Data
x_train <- tbl_df(read.table("train/X_train.txt", col.names = header, colClasses = rep("numeric",561)))
y_train <- read.table("train/y_train.txt", col.names = "activity_code")
y_train <- left_join(y_train,activity)
subject_train <- read.table("train/subject_train.txt",col.names = "subject")
train <- cbind(subject_train, y_train, x_train)
library(dplyr)
## Load Training Data
x_train <- tbl_df(read.table("train/X_train.txt", col.names = header, colClasses = rep("numeric",561)))
y_train <- read.table("train/y_train.txt", col.names = "activity_code")
y_train <- left_join(y_train,activity)
subject_train <- read.table("train/subject_train.txt",col.names = "subject")
train <- cbind(subject_train, y_train, x_train)
## Load Test Data
x_test <- tbl_df(read.table("test/X_test.txt", col.names = header, colClasses = rep("numeric",561)))
y_test <- read.table("test/y_test.txt", col.names = "activity_code")
y_test <- left_join(y_test,activity)
subject_test <- read.table("test/subject_test.txt",col.names = "subject")
test <- cbind(subject_test, y_test, x_test)
## Combine both dataset
data <- tbl_df(rbind(train,test))
select(data,matches(".*mean.*|"))
